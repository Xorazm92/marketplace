generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                   Int      @id @default(autoincrement())
  first_name           String
  last_name            String
  email                String   @unique
  phone_number         String
  is_active            Boolean  @default(false)
  is_creator           Boolean  @default(false)
  activation_link      String   @unique
  hashed_password      String
  hashed_refresh_token String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("admin")
}

model User {
  id                   Int             @id @default(autoincrement())
  first_name           String
  last_name            String
  password             String
  profile_img          String?
  is_active            Boolean         @default(true)
  is_premium           Boolean         @default(false)
  birth_date           String?
  hashed_refresh_token String?
  last_online          DateTime        @default(now())
  balance              Decimal         @default(0)
  slug                 String?         @unique
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  ChatroomUsers        ChatroomUsers[]
  messages             Message[]
  address              Address[]
  cart                 Cart?
  email                Email[]
  orders               Order[]
  payment              Payment[]
  phone_number         PhoneNumber[]
  product              Product[]
  reviews              Review[]
  wishlist             Wishlist?
  chatrooms            Chatroom[]      @relation("ChatroomUsers")
  product_views        ProductView[]
  search_queries       SearchQuery[]
  child_profiles       ChildProfile[]
  parental_controls    ParentalControl[]
  recommendations      ProductRecommendationEngine[]

  @@map("user")
}

// Bolalar profillari
model ChildProfile {
  id           Int      @id @default(autoincrement())
  parent_id    Int
  name         String
  birth_date   DateTime
  gender       String?
  interests    Json?    // qiziqishlari
  allergies    Json?    // allergiyalar
  avatar       String?
  is_active    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  parent       User     @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parental_controls ParentalControl[]
  recommendations    ProductRecommendationEngine[]

  @@map("child_profile")
}

// Yosh kategoriyalari
model AgeGroup {
  id          Int       @id @default(autoincrement())
  name        String    // "0-6 oy", "6-12 oy", "1-2 yosh"
  min_age     Int       // oylar hisobida
  max_age     Int?      // null = yuqori chegara yo'q
  description String?
  icon        String?
  color       String?
  is_active   Boolean   @default(true)
  sort_order  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]

  @@map("age_group")
}

// Xavfsizlik sertifikatlari
model SafetyCertification {
  id              Int      @id @default(autoincrement())
  name            String   // "CE", "CPSIA", "ASTM"
  code            String   @unique
  description     String?
  required_for_age String? // qaysi yosh uchun majburiy
  logo            String?
  is_active       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  product_certifications ProductSafetyCertification[]

  @@map("safety_certification")
}

// Mahsulot xavfsizlik sertifikatlari
model ProductSafetyCertification {
  id                    Int                @id @default(autoincrement())
  product_id            Int
  certification_id      Int
  certificate_number    String?
  issued_date           DateTime?
  expiry_date           DateTime?
  is_verified           Boolean            @default(false)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  product               Product            @relation(fields: [product_id], references: [id], onDelete: Cascade)
  certification         SafetyCertification @relation(fields: [certification_id], references: [id], onDelete: Cascade)

  @@unique([product_id, certification_id])
  @@map("product_safety_certification")
}

// Ota-ona nazorati
model ParentalControl {
  id                  Int     @id @default(autoincrement())
  user_id             Int
  child_profile_id    Int
  spending_limit      Decimal?
  daily_spending_limit Decimal?
  allowed_categories  Json?   // ruxsat etilgan kategoriyalar
  blocked_categories  Json?   // bloklangan kategoriyalar
  time_restrictions   Json?   // vaqt cheklovlari
  is_active           Boolean @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user                User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  child_profile       ChildProfile @relation(fields: [child_profile_id], references: [id], onDelete: Cascade)

  @@unique([user_id, child_profile_id])
  @@map("parental_control")
}

// To'y va tadbir mahsulotlari
model EventType {
  id          Int       @id @default(autoincrement())
  name        String    // "Tug'ilgan kun", "Yangi yil"
  description String?
  icon        String?
  color       String?
  is_active   Boolean   @default(true)
  sort_order  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]

  @@map("event_type")
}

// Ta'lim kategoriyalari
model EducationalCategory {
  id          Int       @id @default(autoincrement())
  name        String    // "STEM", "San'at", "Til o'rganish"
  description String?
  icon        String?
  color       String?
  is_active   Boolean   @default(true)
  sort_order  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]

  @@map("educational_category")
}

// Sovg'a o'rash xizmatlari
model GiftWrap {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  image_url   String?
  for_age     String?   // qaysi yosh uchun mos
  for_gender  String?   // qaysi jins uchun mos
  is_active   Boolean   @default(true)
  sort_order  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("gift_wrap")
}

// Mahsulot tavsiya tizimi
model ProductRecommendationEngine {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  child_profile_id      Int?
  child_age             Int?     // oylar hisobida
  preferences           Json     // qiziqishlar, o'yin turi
  recommended_products  Json     // tavsiya etilgan mahsulotlar ID'lari
  recommendation_score  Decimal  @default(0)
  is_active             Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  child_profile         ChildProfile? @relation(fields: [child_profile_id], references: [id], onDelete: SetNull)

  @@map("product_recommendation_engine")
}

model Region {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  address   Address[]
  district  District[]

  @@map("region")
}

model District {
  id        Int       @id @default(autoincrement())
  name      String
  region_id Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   Address[]
  region    Region    @relation(fields: [region_id], references: [id])

  @@map("district")
}

model Address {
  id              Int       @id @default(autoincrement())
  user_id         Int
  name            String
  lat             String?
  long            String?
  is_main         Boolean   @default(false)
  region_id       Int?
  district_id     Int?
  address         String
  phone_number    String?
  postal_code     String?
  address_type    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  district        District? @relation(fields: [district_id], references: [id])
  region          Region?   @relation(fields: [region_id], references: [id])
  user            User      @relation(fields: [user_id], references: [id])
  billing_orders  Order[]   @relation("BillingAddress")
  shipping_orders Order[]   @relation("ShippingAddress")
  product         Product[]

  @@map("address")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  logo      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  model     Model[]
  product   Product[]

  @@map("brand")
}

model Model {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  brand_id  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brand_id], references: [id])

  @@map("model")
}

model Color {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String?
  hex       String?  // Hex color code
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product_colors ProductColor[]

  @@map("color")
}

model Currency {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  code      String    @unique
  symbol    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  payment   Payment[]
  product   Product[]

  @@map("currency")
}

model PhoneNumber {
  id              Int       @id @default(autoincrement())
  phone_number    String    @unique
  is_main         Boolean   @default(false)
  is_verified     Boolean   @default(false)
  user_id         Int
  otp_code        String?
  otp_expires_at  DateTime?
  otp_attempts    Int       @default(0)
  last_otp_sent   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("phone_number")
}

model OtpVerification {
  id              Int       @id @default(autoincrement())
  phone_number    String
  otp_code        String
  purpose         String    // 'registration', 'login', 'password_reset'
  expires_at      DateTime
  attempts        Int       @default(0)
  is_verified     Boolean   @default(false)
  user_id         Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("otp_verification")
}

model Email {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  user_id         Int
  is_main         Boolean  @default(false)
  is_verified     Boolean  @default(false)
  activation_link String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [user_id], references: [id])

  @@map("email")
}

model PaymentMethod {
  id      Int       @id @default(autoincrement())
  name    String
  payment Payment[]

  @@map("payment_method")
}

model Payment {
  id                Int           @id @default(autoincrement())
  user_id           Int
  payment_method_id Int
  amount            Decimal
  currency_id       Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  currency          Currency      @relation(fields: [currency_id], references: [id])
  payment_method    PaymentMethod @relation(fields: [payment_method_id], references: [id])
  user              User          @relation(fields: [user_id], references: [id])

  @@map("payment")
}

model Product {
  id                    Int            @id @default(autoincrement())
  title                 String
  user_id               Int?
  brand_id              Int
  price                 Decimal
  original_price        Decimal?
  discount_percentage   Int?           @default(0)
  currency_id           Int
  description           String
  short_description     String?
  negotiable            Boolean        @default(false)
  condition             String         @default("new") // new, used, refurbished
  phone_number          String
  address_id            Int?
  slug                  String?        @unique
  is_top                Boolean        @default(false)
  is_featured           Boolean        @default(false)
  is_bestseller         Boolean        @default(false)
  is_checked            isChecked      @default(PENDING)
  is_active             Boolean        @default(true)
  is_deleted            Boolean        @default(false)
  view_count            Int            @default(0)
  like_count            Int            @default(0)
  share_count           Int            @default(0)
  category_id           Int?
  subcategory_id        Int?
  sku                   String?        @unique
  barcode               String?        @unique
  weight                Decimal?
  dimensions            Json?          // {length, width, height}
  age_range             String?
  material              String?
  color                 String?
  size                  String?
  manufacturer          String?
  brand_name            String?
  safety_info           String?
  features              Json?          // Array of features
  specifications        Json?          // Detailed specs
  meta_title            String?
  meta_description      String?
  tags                  String?
  search_keywords       String?
  availability_status   String         @default("in_stock") // in_stock, out_of_stock, pre_order
  min_order_quantity    Int            @default(1)
  max_order_quantity    Int?
  shipping_weight       Decimal?
  shipping_dimensions   Json?
  origin_country        String?
  warranty_period       String?
  return_policy         String?
  care_instructions     String?
  safety_warnings       String?
  certifications        Json?          // Array of certifications
  educational_value     String?
  skill_development     Json?          // Array of skills
  play_pattern          String?
  assembly_required     Boolean        @default(false)
  battery_required      Boolean        @default(false)
  choking_hazard        Boolean        @default(false)
  
  // Bolalar uchun qo'shimcha maydonlar
  age_group_id          Int?
  educational_category_id Int?
  event_type_id         Int?
  difficulty_level      String?       // "Oson", "O'rta", "Qiyin"
  play_time            String?       // "15-30 daqiqa"
  player_count         String?       // "1-4 kishi"
  learning_objectives  Json?         // o'quv maqsadlari
  developmental_skills Json?         // rivojlanish ko'nikmalari
  parental_guidance    Boolean @default(false)
  multilingual_support Json?         // qo'llab-quvvatlanadigan tillar
  recommended_age_min  Int?          // tavsiya etilgan minimal yosh (oy)
  recommended_age_max  Int?          // tavsiya etilgan maksimal yosh (oy)
  gender_specific      String?       // "Erkak", "Ayol", "Umumiy"
  
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  cart_items       CartItem[]
  inventory               Inventory?
  order_items             OrderItem[]
  address                 Address?                  @relation(fields: [address_id], references: [id])
  brand                   Brand                     @relation(fields: [brand_id], references: [id])
  category                Category?                 @relation(fields: [category_id], references: [id])
  currency                Currency                  @relation(fields: [currency_id], references: [id])
  user                    User?                     @relation(fields: [user_id], references: [id])
  product_image           ProductImage[]
  reviews                 Review[]
  wishlist_items          WishlistItem[]
  variants                ProductVariant[]
  collection_items        ProductCollectionItem[]
  attribute_values        ProductAttributeValue[]
  product_colors          ProductColor[]
  recommendations         ProductRecommendation[]   @relation("ProductRecommendations")
  recommended_by          ProductRecommendation[]   @relation("RecommendedProducts")
  views                   ProductView[]
  search_clicks           SearchQuery[]
  
  // Yangi munosabatlar
  age_group              AgeGroup?                 @relation(fields: [age_group_id], references: [id])
  educational_category   EducationalCategory?      @relation(fields: [educational_category_id], references: [id])
  event_type             EventType?                @relation(fields: [event_type_id], references: [id])
  safety_certifications  ProductSafetyCertification[]

  @@map("product")
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  url        String
  product_id Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id])

  @@map("product_image")
}

model Otp {
  id           Int      @id @default(autoincrement())
  code         String
  is_used      Boolean  @default(false)
  expired_time DateTime
  phone_number String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("otp")
}

model Chatroom {
  id            Int             @id @default(autoincrement())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ChatroomUsers ChatroomUsers[]
  messages      Message[]
  users         User[]          @relation("ChatroomUsers")
}

model Message {
  id         Int          @id @default(autoincrement())
  type       MessageType?
  content    String
  imageUrl   String?
  userId     Int
  chatroomId Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  chatroom   Chatroom     @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatroomUsers {
  chatroomId Int
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatroomId, userId])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique
  description String?
  image_url   String?
  parent_id   Int?
  is_active   Boolean    @default(true)
  sort_order  Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("category")
}

model Cart {
  id        Int        @id @default(autoincrement())
  user_id   Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("cart")
}

model CartItem {
  id              Int             @id @default(autoincrement())
  cart_id         Int
  product_id      Int
  variant_id      Int?
  quantity        Int             @default(1)
  unit_price      Decimal
  total_price     Decimal
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  cart            Cart            @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product         Product         @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant         ProductVariant? @relation(fields: [variant_id], references: [id], onDelete: SetNull)

  @@unique([cart_id, product_id, variant_id])
  @@map("cart_item")
}

model Wishlist {
  id        Int            @id @default(autoincrement())
  user_id   Int            @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items     WishlistItem[]

  @@map("wishlist")
}

model WishlistItem {
  id          Int      @id @default(autoincrement())
  wishlist_id Int
  product_id  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  wishlist    Wishlist @relation(fields: [wishlist_id], references: [id], onDelete: Cascade)

  @@unique([wishlist_id, product_id])
  @@map("wishlist_item")
}

model Order {
  id                  Int             @id @default(autoincrement())
  order_number        String          @unique
  user_id             Int
  total_amount        Decimal
  discount_amount     Decimal         @default(0)
  tax_amount          Decimal         @default(0)
  shipping_amount     Decimal         @default(0)
  final_amount        Decimal
  currency_id         Int
  status              OrderStatus     @default(PENDING)
  payment_status      PaymentStatus   @default(PENDING)
  payment_method      String?
  shipping_address_id Int?
  billing_address_id  Int?
  notes               String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  billing_address     Address?        @relation("BillingAddress", fields: [billing_address_id], references: [id])
  currency            Currency        @relation(fields: [currency_id], references: [id])
  shipping_address    Address?        @relation("ShippingAddress", fields: [shipping_address_id], references: [id])
  user                User            @relation(fields: [user_id], references: [id])
  items               OrderItem[]
  payments            OrderPayment[]
  tracking            OrderTracking[]

  @@map("order")
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  order_id    Int
  product_id  Int
  quantity    Int
  unit_price  Decimal
  total_price Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [product_id], references: [id])

  @@map("order_item")
}

model OrderPayment {
  id               Int           @id @default(autoincrement())
  order_id         Int
  amount           Decimal
  payment_method   String
  transaction_id   String?
  status           PaymentStatus @default(PENDING)
  gateway_response Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  order            Order         @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("order_payment")
}

model OrderTracking {
  id          Int         @id @default(autoincrement())
  order_id    Int
  status      OrderStatus
  description String?
  location    String?
  createdAt   DateTime    @default(now())
  order       Order       @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("order_tracking")
}

model Review {
  id            Int           @id @default(autoincrement())
  product_id    Int
  user_id       Int
  rating        Int
  title         String?
  comment       String?
  is_verified   Boolean       @default(false)
  helpful_count Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  product       Product       @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  images        ReviewImage[]

  @@unique([product_id, user_id])
  @@map("review")
}

model ReviewImage {
  id        Int      @id @default(autoincrement())
  review_id Int
  url       String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [review_id], references: [id], onDelete: Cascade)

  @@map("review_image")
}

model Coupon {
  id                    Int        @id @default(autoincrement())
  code                  String     @unique
  name                  String
  description           String?
  type                  CouponType
  value                 Decimal
  min_order_amount      Decimal?
  max_discount_amount   Decimal?
  usage_limit           Int?
  used_count            Int        @default(0)
  user_usage_limit      Int?
  is_active             Boolean    @default(true)
  valid_from            DateTime
  valid_until           DateTime
  applicable_categories String?
  applicable_products   String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@map("coupon")
}

model Inventory {
  id                  Int                 @id @default(autoincrement())
  product_id          Int                 @unique
  stock_quantity      Int                 @default(0)
  reserved_quantity   Int                 @default(0)
  low_stock_threshold Int                 @default(10)
  is_in_stock         Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  product             Product             @relation(fields: [product_id], references: [id], onDelete: Cascade)
  movements           InventoryMovement[]

  @@map("inventory")
}

model InventoryMovement {
  id           Int          @id @default(autoincrement())
  inventory_id Int
  type         MovementType
  quantity     Int
  reason       String?
  reference_id String?
  createdAt    DateTime     @default(now())
  inventory    Inventory    @relation(fields: [inventory_id], references: [id], onDelete: Cascade)

  @@map("inventory_movement")
}

// Advanced E-commerce Models

model ProductVariant {
  id                Int         @id @default(autoincrement())
  product_id        Int
  name              String      // Color, Size, etc.
  value             String      // Red, Large, etc.
  price_adjustment  Decimal     @default(0)
  sku               String?     @unique
  stock_quantity    Int         @default(0)
  is_active         Boolean     @default(true)
  sort_order        Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  product           Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  cart_items        CartItem[]

  @@map("product_variants")
}

model ProductCollection {
  id                Int                      @id @default(autoincrement())
  name              String
  slug              String                   @unique
  description       String?
  image_url         String?
  is_active         Boolean                  @default(true)
  sort_order        Int                      @default(0)
  meta_title        String?
  meta_description  String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt

  products          ProductCollectionItem[]

  @@map("product_collections")
}

model ProductCollectionItem {
  id            Int               @id @default(autoincrement())
  collection_id Int
  product_id    Int
  sort_order    Int               @default(0)
  createdAt     DateTime          @default(now())

  collection    ProductCollection @relation(fields: [collection_id], references: [id], onDelete: Cascade)
  product       Product           @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([collection_id, product_id])
  @@map("product_collection_items")
}

model ProductAttribute {
  id          Int                     @id @default(autoincrement())
  name        String                  @unique
  type        String                  // text, number, boolean, select, multiselect
  is_required Boolean                 @default(false)
  is_filterable Boolean               @default(false)
  sort_order  Int                     @default(0)
  options     Json?                   // For select/multiselect types
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt

  values      ProductAttributeValue[]

  @@map("product_attributes")
}

model ProductAttributeValue {
  id           Int              @id @default(autoincrement())
  product_id   Int
  attribute_id Int
  value        String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  product      Product          @relation(fields: [product_id], references: [id], onDelete: Cascade)
  attribute    ProductAttribute @relation(fields: [attribute_id], references: [id], onDelete: Cascade)

  @@unique([product_id, attribute_id])
  @@map("product_attribute_values")
}

model ProductColor {
  id         Int      @id @default(autoincrement())
  product_id Int
  color_id   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  color      Color    @relation(fields: [color_id], references: [id], onDelete: Cascade)

  @@unique([product_id, color_id])
  @@map("product_colors")
}

model ProductRecommendation {
  id                    Int      @id @default(autoincrement())
  product_id            Int
  recommended_product_id Int
  type                  String   // related, similar, frequently_bought_together, upsell, cross_sell
  score                 Decimal  @default(0)
  is_active             Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  product               Product  @relation("ProductRecommendations", fields: [product_id], references: [id], onDelete: Cascade)
  recommended_product   Product  @relation("RecommendedProducts", fields: [recommended_product_id], references: [id], onDelete: Cascade)

  @@unique([product_id, recommended_product_id, type])
  @@map("product_recommendations")
}

model ProductView {
  id         Int      @id @default(autoincrement())
  product_id Int
  user_id    Int?
  ip_address String?
  user_agent String?
  referrer   String?
  viewed_at  DateTime @default(now())

  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@map("product_views")
}

model SearchQuery {
  id           Int      @id @default(autoincrement())
  query        String
  user_id      Int?
  results_count Int     @default(0)
  clicked_product_id Int?
  ip_address   String?
  searched_at  DateTime @default(now())

  user         User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  clicked_product Product? @relation(fields: [clicked_product_id], references: [id], onDelete: SetNull)

  @@map("search_queries")
}

enum isChecked {
  PENDING
  APPROVED
  REJECTED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  RESERVED
  RELEASED
}
