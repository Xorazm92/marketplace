version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: inbola_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: inbola_user
      POSTGRES_PASSWORD: inbola_password
      POSTGRES_DB: inbola_marketplace_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - inbola_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inbola_user -d inbola_marketplace_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: inbola_redis
    restart: unless-stopped
    command: redis-server --requirepass inbola_redis_password --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - inbola_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend-main
      dockerfile: Dockerfile.professional
    container_name: inbola_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://inbola_user:inbola_password@postgres:5432/inbola_marketplace_db
      REDIS_URL: redis://:inbola_redis_password@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_change_in_production}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET:-your_super_secret_refresh_key_change_in_production}
      FRONTEND_URL: http://localhost:3000
      PORT: 3001
      # Email Configuration
      MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USER: ${MAIL_USER}
      MAIL_PASS: ${MAIL_PASS}
      # Payment Gateways
      CLICK_SERVICE_ID: ${CLICK_SERVICE_ID}
      CLICK_MERCHANT_ID: ${CLICK_MERCHANT_ID}
      CLICK_SECRET_KEY: ${CLICK_SECRET_KEY}
      PAYME_MERCHANT_ID: ${PAYME_MERCHANT_ID}
      PAYME_SECRET_KEY: ${PAYME_SECRET_KEY}
      # SMS Service
      SMS_TOKEN: ${SMS_TOKEN}
      # File Upload
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 10485760
    ports:
      - "3001:3001"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - inbola_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./front-main
      dockerfile: Dockerfile.professional
    container_name: inbola_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_BASE_URL: http://localhost:3000
      NEXT_PUBLIC_APP_NAME: "INBOLA Kids Marketplace"
      NEXT_PUBLIC_APP_VERSION: "2.0.0"
      NEXT_PUBLIC_ENABLE_PWA: "true"
      NEXT_PUBLIC_ENABLE_ANALYTICS: "true"
    ports:
      - "3000:3000"
    networks:
      - inbola_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: inbola_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./uploads:/var/www/uploads
      - ./ssl:/etc/nginx/ssl
    networks:
      - inbola_network
    depends_on:
      - frontend
      - backend

  # Image Optimization Service
  image_optimizer:
    image: h2non/imaginary
    container_name: inbola_image_optimizer
    restart: unless-stopped
    ports:
      - "9000:9000"
    command: -enable-url-source -allowed-origins http://localhost:3000
    networks:
      - inbola_network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: inbola_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - inbola_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: inbola_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - inbola_network

  # Log Management - ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: inbola_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - inbola_network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: inbola_backup
    restart: "no"
    environment:
      PGPASSWORD: inbola_password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - inbola_network
    depends_on:
      - postgres
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  inbola_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
