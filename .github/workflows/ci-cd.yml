
name: INBOLA E-Commerce CI/CD Pipeline

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Test and Build Backend
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: inbola_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-main/package-lock.json

    - name: Install dependencies
      working-directory: ./backend-main
      run: npm ci

    - name: Setup test database
      working-directory: ./backend-main
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/inbola_test
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        REDIS_URL: redis://localhost:6379
      run: |
        npx prisma generate
        npx prisma migrate deploy

    - name: Run unit tests
      working-directory: ./backend-main
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/inbola_test
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        REDIS_URL: redis://localhost:6379
      run: npm run test

    - name: Run e2e tests
      working-directory: ./backend-main
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/inbola_test
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        REDIS_URL: redis://localhost:6379
      run: npm run test:e2e

    - name: Generate test coverage
      working-directory: ./backend-main
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/inbola_test
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        REDIS_URL: redis://localhost:6379
      run: npm run test:cov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./backend-main/coverage/lcov.info
        flags: backend

    - name: Build backend
      working-directory: ./backend-main
      run: npm run build

    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: ./backend-main/dist
        key: backend-build-${{ github.sha }}

  # Test and Build Frontend
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: front-main/package-lock.json

    - name: Install dependencies
      working-directory: ./front-main
      run: npm ci

    - name: Run frontend tests
      working-directory: ./front-main
      run: npm run test

    - name: Run linting
      working-directory: ./front-main
      run: npm run lint

    - name: Run type checking
      working-directory: ./front-main
      run: npm run type-check

    - name: Build frontend
      working-directory: ./front-main
      env:
        NEXT_PUBLIC_API_URL: https://api.inbola.uz
      run: npm run build

    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: |
          ./front-main/.next
          ./front-main/out
        key: frontend-build-${{ github.sha }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run security audit (Backend)
      working-directory: ./backend-main
      run: npm audit --audit-level=high

    - name: Run security audit (Frontend)
      working-directory: ./front-main
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Load Testing (Staging only)
  load-testing:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/staging'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      working-directory: ./backend-main
      run: k6 run scripts/load-test.js --out json=load-test-results.json

    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: ./backend-main/load-test-results.json

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/staging'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to Replit Staging
      env:
        REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Deployment logic here
        curl -X POST \
          -H "Authorization: Bearer $REPLIT_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"branch": "staging"}' \
          https://api.replit.com/deployments/staging

    - name: Run smoke tests
      run: |
        echo "ðŸ§ª Running smoke tests..."
        sleep 30  # Wait for deployment
        curl -f https://staging.inbola.uz/health || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, load-testing]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Restore backend build
      uses: actions/cache@v3
      with:
        path: ./backend-main/dist
        key: backend-build-${{ github.sha }}

    - name: Restore frontend build
      uses: actions/cache@v3
      with:
        path: |
          ./front-main/.next
          ./front-main/out
        key: frontend-build-${{ github.sha }}

    - name: Run pre-launch checklist
      working-directory: ./backend-main
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
      run: node scripts/pre-launch-checklist.js

    - name: Deploy to Replit Production
      env:
        REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}
      run: |
        echo "ðŸš€ Deploying to production..."
        curl -X POST \
          -H "Authorization: Bearer $REPLIT_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"branch": "main"}' \
          https://api.replit.com/deployments/production

    - name: Post-deployment verification
      run: |
        echo "âœ… Running post-deployment checks..."
        sleep 60  # Wait for deployment
        curl -f https://inbola.uz/health || exit 1
        curl -f https://inbola.uz/api/health || exit 1

    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "ðŸŽ‰ Production deployment successful!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "ðŸš¨ Production deployment failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production

    steps:
    - name: Rollback deployment
      env:
        REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}
      run: |
        echo "ðŸ”„ Rolling back deployment..."
        curl -X POST \
          -H "Authorization: Bearer $REPLIT_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"action": "rollback"}' \
          https://api.replit.com/deployments/rollback
